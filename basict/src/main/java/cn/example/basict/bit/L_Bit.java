package cn.example.basict.bit;

/**
 * Author：created by SugarT
 * Time：2019/11/7 13
 */
public class L_Bit {
    public static void main(String args[])  {

//        补码();
//        按位与();

//        按位或();

        左移();
//        右移();

//        按位与();

//        按位异或();

//        System.out.println(hammingDistance(1,4));
//        System.out.println(Integer.bitCount(5));
//        System.out.println(Integer.toBinaryString(5));


    }

    public static int hammingDistance(int x, int y) {
        //bitCount 数出整数二进制下 1 的个数
        //1^0 = 1 ,0^1 =1 ,0^0 = 0 ,1^1 = 0
        return Integer.bitCount(x^y);
    }


    /**
     * 补码
     * 当将一个十进制正整数转换为二进制数的时候，只需要通过除2取余的方法即可，
     * 但是怎么将一个十进制的负整数转换为二进制数呢？其实，负数是以补码的形式表示，其转换方式，简单的一句话就是：先按正数转换，然后取反加1。
     */
    private static void 补码(){

        /**
         * 要将十进制的-10用二进制表示，先将10用二进制表示：
         * 0000 0000 0000 1010
         * 取反：
         * 1111 1111 1111 0101
         * 加1：
         * 1111 1111 1111 0110
         * 所以，-10的二进制表示就是：1111 1111 1111 0110
         */
        System.out.println(Integer.toBinaryString(10));
        System.out.println(Integer.toBinaryString(-10));

        /**
         * 输出结果
         * 1010
         * 11111111111111111111111111110110  长度为32
         *
         * 思考为什么长度为32
         *
         * 因为Integer占用4个字节 一个字节占据8位
         * Integer = 4byte
         * 1byte = 8bit
         *
         * byte 的大小范围是-128—127
         * int的大小范围是-2147483648到2147483647。
         *
         */
        System.out.println(Integer.toBinaryString(127));
        System.out.println(Integer.toBinaryString(-128));
    }


    /**
     * 按位与(&)
     *参加运算的两个数，换算为二进制(0、1)后，进行与运算。只有当相应位上的数都是1时，该位才取1，否则该为为0
     *
     * 0x7FFFFFFF = 2147483647 32位最大正整数 2^32 - 1
     */
    private static void 按位与(){

        /**
         * 将10与-10进行按位与(&)运算：
         * 0000 0000 0000 1010
         * 1111 1111 1111 0110
         * -----------------------
         * 0000 0000 0000 0010
         * 所以：10 & -10 = 0000 0000 0000 0010
         */
        System.out.println(10&-10);
        System.out.println(1230&0x7FFFFFFF);
        System.out.println(1230&2147483647);
        System.out.println(-1&0x7FFFFFFF);
    }


    /**
     * 按位或(|)
     *参加运算的两个数，换算为二进制(0、1)后，进行或运算。只要相应位上存在1，那么该位就取1，均不为1，即为0。
     */
    private static void 按位或(){

        /**
         * 将10与-10进行按位或(|)运算：
         * 0000 0000 0000 1010
         * 1111 1111 1111 0110
         * -----------------------
         * 1111 1111 1111 1110
         * 所以：10 | -10 = 1111 1111 1111 1110
         */
        System.out.println(10|-10);
    }

    /**
     * 按位异或(^)
     * 参加运算的两个数，换算为二进制(0、1)后，进行异或运算。只有当相应位上的数字不相同时，该为才取1，若相同，即为0。
     *
     * //todo 那么意味着相同的两个数进行异或(^)得到的结果是0
     */
    private static void 按位异或(){

        /**
         * 将10与-10进行按位异或(^)运算：
         * 0000 0000 0000 1010
         * 1111 1111 1111 0110
         * -----------------------
         * 1111 1111 1111 1100
         * 所以：10 ^ -10 = 1111 1111 1111 1100
         */
        System.out.println(10^0);
        System.out.println(1^4);

        /**
         * 可以看出，任何数与0异或，结果都是其本身。利用异或还可以实现一个很好的交换算法，用于交换两个数，算法如下：
         * a = a ^ b;
         * b = b ^ a;
         * a = a ^ b;
         */
    }


    /**
     * 左移(<<)
     * 参加运算的两个数，换算为二进制(0、1)后，进行左移运算，用来将一个数各二进制位全部向左移动若干位。
     * 注意，观察可以发现，左移一位的结果就是原值乘2，左移两位的结果就是原值乘4。
     */
    private static void 左移(){

        /**
         * 对10左移2位(就相当于在右边加2个0)：
         * 0000 0000 0000 1010
         * --------------------
         * 0000 0000 0010 1000
         * 所以：10 << 2 = 0000 0000 0010 1000 = 40
         */
        System.out.println(10<<1);
        System.out.println(10<<2);
    }


    /**
     * 右移(>>)
     * 参加运算的两个数，换算为二进制(0、1)后，进行右移运算，用来将一个数各二进制位全部向右移动若干位。
     *
     * 注意，观察可以发现，右移一位的结果就是原值除2，左移两位的结果就是原值除4，注意哦，除了以后没有小数位的，都是取整。
     */
    private static void 右移(){

        /**
         *对10右移2位(就相当于在左边加2个0)：
         * 0000 0000 0000 1010
         * --------------------
         * 0000 0000 0000 0010
         * 所以：10 >> 2 = 0000 0000 0000 0010 = 2
         */
        System.out.println(80>>2);
    }

}
